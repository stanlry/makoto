package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path/filepath"
)

const collectionFilename = "pack.go"

func GenerateStringCollection(path string) {
	fmt.Println("Collect migration scripts:")

	buffer := bytes.NewBuffer(nil)
	fmt.Fprint(buffer, `// Code generated by makoto cli, DO NOT EDIT.
package migration

import "github.com/stanlry/makoto"

func New(db *sql.DB) *makoto.Migrator {
	m := makoto.New(db)
	m.SetCollection(getCollection())
	return m
}

func getCollection() makoto.MigrateCollection {
	statements := []makoto.MigrateStatement{
	`)

	collection := processMigrationCollection(path)
	migration := collection.Head()
	for {
		st := migration.Statement()
		upSt, _ := json.Marshal(st.UpStatement)
		downSt, _ := json.Marshal(st.DownStatement)

		fmt.Fprintf(buffer, `
		{"%v", "%v", %v, %v, "%v"},
		`, st.Version, st.Filename, string(upSt), string(downSt), st.Checksum)

		fmt.Printf("%v\n", st.Filename)

		if migration.Next() != nil {
			migration = migration.Next()
			continue
		}
		break
	}

	fmt.Fprint(buffer, `
	}

	collection := makoto.MigrationCollection{}
	for _, st := range statements {
		collection.Add(statement)
	}
	return &collection
}`)

	dest := filepath.Join(path, collectionFilename)
	if err := ioutil.WriteFile(dest, buffer.Bytes(), 0644); err != nil {
		panic(err)
	}
}

func GenerateEmbedCollection(path string) {
	fmt.Println("Generating go embed file")

	buffer := bytes.NewBuffer(nil)
	fmt.Fprint(buffer, `// Code generated by makoto cli, DO NOT EDIT.
package migration

import (
	"database/sql"
	"embed"

	"github.com/stanlry/makoto"
)

//go:embed sql/*.sql
var collection embed.FS

func New(db *sql.DB) *makoto.Migrator {
	m := makoto.New(db)
	m.SetEmbedCollection(collection)
	return m
}

`)

	dest := filepath.Join(path, collectionFilename)
	if err := ioutil.WriteFile(dest, buffer.Bytes(), 0644); err != nil {
		panic(err)
	}
}
